name: CI

on:
  push:
    paths:
      - "src/app/pages/**/*.tsx"
      - "src/app/provider/**/*.tsx"
        # src/app/pages 디렉토리 내 .tsx 파일 변경 시 실행

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 Git 히스토리를 가져옵니다.

      # 2. Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3. 의존성 설치
      - name: Install dependencies
        run: npm install

      # 4. Lint 실행
      - name: Run Lint
        env:
          NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_API: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_API }}
          NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_USER: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_USER }}
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      # 1. 레포지토리 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 Git 히스토리를 가져옵니다.

      # 2. Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 3. 의존성 설치
      - name: Install dependencies
        run: npm install

      # 4. 변경된 파일 추출
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      # 5. 변경된 파일에서 테스트 파일로 변환
      - name: Generate test files list
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          echo "Changed files: $ALL_CHANGED_FILES"

          TEST_FILES=$(echo "$ALL_CHANGED_FILES" | grep 'src/app/pages/.*\.tsx$' | sed -E 's/\.tsx$/.test.tsx/; s/\.test\.test\.tsx$/.test.tsx/' || true)

          echo "Test files to run: $TEST_FILES"

          echo "TEST_FILES=$TEST_FILES" >> $GITHUB_ENV

      # 6. 테스트 실행
      - name: Run tests for changed test files
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_API: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_API }}
          NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_USER: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_GOGGLE_USER }}
        run: |
          if [ -z "$TEST_FILES" ]; then
            echo "No .test.tsx files found. Skipping tests."
            exit 0
          fi

          echo "Running tests for the following files:"
          echo "$TEST_FILES"

          # Jest로 테스트 실행
          npm test -- --runInBand --watchAll=false $TEST_FILES
